"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const schema_options_1 = require("../models/schema-options");
const schema_types_1 = __importStar(require("../schema-types"));
class Schema {
    constructor(structure, options) {
        this.structure = structure;
        this.options = Object.assign(Object.assign({}, schema_options_1.DEFAULT_SCHEMA_OPTIONS), options);
    }
    // eslint-disable-next-line sonarjs/cognitive-complexity
    validateForSaving(data) {
        const output = Object.assign({}, data);
        if (typeof data !== 'object') {
            // eslint-disable-next-line sonarjs/no-duplicate-string
            throw new Error('Invalid data provided');
        }
        Object.keys(output).concat(Object.keys(this.structure)).forEach((key) => {
            var _a;
            // remove keys that are not in the schema
            if (this.structure[key] === undefined) {
                // @ts-expect-error
                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
                delete output[key];
                return;
            }
            // check type validity
            if (this.structure[key].type === undefined || !schema_types_1.Types.includes(this.structure[key].type)) {
                throw new Error(`Invalid type for ${key}`);
            }
            // check references for object id
            if (this.structure[key].type === schema_types_1.default.ObjectId && this.structure[key].ref === undefined) {
                throw new Error(`Missing ref for ${key}`);
            }
            // check required fields
            // @ts-expect-error
            if (((_a = this.structure[key].required) !== null && _a !== void 0 ? _a : false) && (output === undefined || output[key] === undefined)) {
                throw new Error(`${key} is required`);
            }
            // pass default values
            // @ts-expect-error
            if (this.structure[key].default !== undefined && output[key] === undefined) {
                // @ts-expect-error
                output[key] = this.structure[key].default;
            }
            // check string type validity
            // @ts-expect-error
            if (this.structure[key].type === schema_types_1.default.String && output !== undefined && output[key] !== undefined && typeof output[key] !== 'string') {
                // @ts-expect-error
                throw new Error(`Invalid type for ${key}. Expected value should be a string but a ${typeof output[key]} is provided.`);
            }
            // check number type validity
            // @ts-expect-error
            if (this.structure[key].type === schema_types_1.default.Number && output !== undefined && output[key] !== undefined && typeof output[key] !== 'number') {
                // @ts-expect-error
                throw new Error(`Invalid type for ${key}. Expected value should be a number but a ${typeof output[key]} is provided.`);
            }
            // check boolean type validity
            // @ts-expect-error
            if (this.structure[key].type === schema_types_1.default.Boolean && output !== undefined && output[key] !== undefined && typeof output[key] !== 'boolean') {
                // @ts-expect-error
                throw new Error(`Invalid type for ${key}. Expected value should be a boolean but a ${typeof output[key]} is provided.`);
            }
            // check object type validity
            // @ts-expect-error
            if (this.structure[key].type === schema_types_1.default.Object && output !== undefined && output[key] !== undefined && typeof output[key] !== 'object') {
                // @ts-expect-error
                throw new Error(`Invalid type for ${key}. Expected value should be an object but a ${typeof output[key]} is provided.`);
            }
            // check array type validity
            // @ts-expect-error
            if (this.structure[key].type === schema_types_1.default.Array && output !== undefined && output[key] !== undefined && !Array.isArray(output[key])) {
                // @ts-expect-error
                throw new Error(`Invalid type for ${key}. Expected value should be an array but a ${typeof output[key]} is provided.`);
            }
            // check date type validity
            // @ts-expect-error
            if (this.structure[key].type === schema_types_1.default.Date && output !== undefined && output[key] !== undefined && !(output[key] instanceof Date)) {
                // @ts-expect-error
                throw new Error(`Invalid type for ${key}. Expected value should be a Date reference but a ${typeof output[key]} is provided.`);
            }
        });
        if (this.options.timestamps === true) {
            // @ts-expect-error
            output.createdAt = new Date();
            // @ts-expect-error
            output.updatedAt = new Date();
        }
        return output;
    }
    // eslint-disable-next-line sonarjs/cognitive-complexity
    validateForUpdating(data) {
        const output = Object.assign({}, data);
        if (typeof data !== 'object') {
            throw new Error('Invalid data provided');
        }
        Object.keys(output).concat(Object.keys(this.structure)).forEach((key) => {
            // remove keys that are not in the schema
            if (this.structure[key] === undefined) {
                // @ts-expect-error
                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
                delete output[key];
                return;
            }
            // check string type validity
            // @ts-expect-error
            if (this.structure[key].type === schema_types_1.default.String && output !== undefined && output[key] !== undefined && typeof output[key] !== 'string') {
                // @ts-expect-error
                throw new Error(`Invalid type for ${key}. Expected value should be a string but a ${typeof output[key]} is provided.`);
            }
            // check boolean type validity
            // @ts-expect-error
            if (this.structure[key].type === schema_types_1.default.Boolean && output !== undefined && output[key] !== undefined && typeof output[key] !== 'boolean') {
                // @ts-expect-error
                throw new Error(`Invalid type for ${key}. Expected value should be a boolean but a ${typeof output[key]} is provided.`);
            }
            // check number type validity
            // @ts-expect-error
            if (this.structure[key].type === schema_types_1.default.Number && output !== undefined && output[key] !== undefined && typeof output[key] !== 'number') {
                // @ts-expect-error
                throw new Error(`Invalid type for ${key}. Expected value should be a number but a ${typeof output[key]} is provided.`);
            }
            // check array type validity
            // @ts-expect-error
            if (this.structure[key].type === schema_types_1.default.Array && output !== undefined && output[key] !== undefined && !Array.isArray(output[key])) {
                // @ts-expect-error
                throw new Error(`Invalid type for ${key}. Expected value should be an array but a ${typeof output[key]} is provided.`);
            }
            // check object type validity
            // @ts-expect-error
            if (this.structure[key].type === schema_types_1.default.Object && output !== undefined && output[key] !== undefined && typeof output[key] !== 'object') {
                // @ts-expect-error
                throw new Error(`Invalid type for ${key}. Expected value should be an object but a ${typeof output[key]} is provided.`);
            }
            // check date type validity
            // @ts-expect-error
            if (this.structure[key].type === schema_types_1.default.Date && output !== undefined && output[key] !== undefined && !(output[key] instanceof Date)) {
                // @ts-expect-error
                throw new Error(`Invalid type for ${key}. Expected value should be a Date reference but a ${typeof output[key]} is provided.`);
            }
        });
        if (this.options.timestamps === true) {
            // @ts-expect-error
            output.updatedAt = new Date();
        }
        return output;
    }
}
exports.default = Schema;
