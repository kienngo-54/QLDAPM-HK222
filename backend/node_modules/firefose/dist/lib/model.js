"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const firebase_admin_1 = __importDefault(require("firebase-admin"));
const schema_types_1 = __importDefault(require("../schema-types"));
class Model {
    constructor(collection, schema) {
        this.collection = collection;
        this.schema = schema;
    }
    create(data, doc) {
        return __awaiter(this, void 0, void 0, function* () {
            const validatedData = this.schema.validateForSaving(data);
            let output;
            if (doc !== undefined) {
                // @ts-expect-error
                output = (yield firebase_admin_1.default.firestore().collection(this.collection).doc(doc).set(validatedData));
            }
            else {
                // @ts-expect-error
                output = (yield firebase_admin_1.default.firestore().collection(this.collection).add(validatedData));
            }
            // @ts-expect-error
            return Object.assign({ id: doc !== null && doc !== void 0 ? doc : output.id }, validatedData);
        });
    }
    findById(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const doc = yield firebase_admin_1.default.firestore().collection(this.collection).doc(id).get();
            return this.format(doc);
        });
    }
    find(query) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            let firestoreQuery = firebase_admin_1.default.firestore().collection(this.collection);
            if (query.conditions.length > 0) {
                query.conditions.forEach(condition => {
                    firestoreQuery = firestoreQuery.where(condition.field, condition.operator, condition.value);
                });
            }
            if (query.orderField !== undefined) {
                firestoreQuery = firestoreQuery.orderBy(query.orderField.field, (_a = query.orderField) === null || _a === void 0 ? void 0 : _a.direction);
            }
            if (query.limitTo !== undefined) {
                firestoreQuery = firestoreQuery.limit(query.limitTo);
            }
            if (query.offsetTo !== undefined) {
                firestoreQuery = firestoreQuery.offset(query.offsetTo);
            }
            let data = (yield firestoreQuery.get()).docs.map(doc => this.format(doc));
            if (query.populateOn.length > 0) {
                data = yield Promise.all(data.map((item) => __awaiter(this, void 0, void 0, function* () {
                    const populatedItem = Object.assign({}, item);
                    for (const field of query.populateOn) {
                        // @ts-expect-error
                        populatedItem[field] = this.format((yield firebase_admin_1.default.firestore().collection(this.schema.structure[field].ref).doc(item[field]).get()));
                    }
                    return populatedItem;
                })));
            }
            return data;
        });
    }
    findOne(query) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.find(query);
            return data[0];
        });
    }
    updateById(id, data) {
        return __awaiter(this, void 0, void 0, function* () {
            const validatedData = this.schema.validateForUpdating(data);
            // @ts-expect-error
            yield firebase_admin_1.default.firestore().collection(this.collection).doc(id).update(validatedData, { merge: true });
            return Object.assign({ id }, validatedData);
        });
    }
    update(query, data) {
        return __awaiter(this, void 0, void 0, function* () {
            const validatedData = this.schema.validateForUpdating(data);
            let firestoreQuery = firebase_admin_1.default.firestore().collection(this.collection);
            if (query.conditions.length > 0) {
                query.conditions.forEach(condition => {
                    firestoreQuery = firestoreQuery.where(condition.field, condition.operator, condition.value);
                });
            }
            const dataToUpdate = (yield firestoreQuery.get()).docs.map(doc => this.format(doc));
            yield Promise.all(dataToUpdate.map((item) => __awaiter(this, void 0, void 0, function* () {
                // @ts-expect-error
                return yield this.updateById(item.id, validatedData);
            })));
            return dataToUpdate;
        });
    }
    updateOne(query, data) {
        return __awaiter(this, void 0, void 0, function* () {
            const validatedData = this.schema.validateForUpdating(data);
            const dataToUpdate = yield this.findOne(query);
            // @ts-expect-error
            return yield this.updateById(dataToUpdate.id, validatedData);
        });
    }
    deleteById(id) {
        return __awaiter(this, void 0, void 0, function* () {
            yield firebase_admin_1.default.firestore().collection(this.collection).doc(id).delete();
            return id;
        });
    }
    delete(query) {
        return __awaiter(this, void 0, void 0, function* () {
            let fbQuery = firebase_admin_1.default.firestore().collection(this.collection);
            if (query.conditions.length > 0) {
                query.conditions.forEach(condition => {
                    fbQuery = fbQuery.where(condition.field, condition.operator, condition.value);
                });
            }
            const dataToDelete = (yield fbQuery.get()).docs.map(doc => this.format(doc));
            yield Promise.all(dataToDelete.map((item) => __awaiter(this, void 0, void 0, function* () {
                // @ts-expect-error
                return yield this.deleteById(item.id);
            })));
            // @ts-expect-error
            return dataToDelete.map(item => item.id);
        });
    }
    deleteOne(query) {
        return __awaiter(this, void 0, void 0, function* () {
            const dataToDelete = yield this.findOne(query);
            // @ts-expect-error
            return yield this.deleteById(dataToDelete.id);
        });
    }
    format(doc) {
        if (!doc.exists) {
            return null;
        }
        const data = doc.data();
        Object.keys(this.schema.structure).forEach(key => {
            // @ts-expect-error
            if (this.schema.structure[key].type === schema_types_1.default.Date && data[key] !== undefined) {
                // @ts-expect-error
                data[key] = data[key].toDate();
            }
        });
        // @ts-expect-error
        if (this.schema.options.timestamps === true && data.createdAt !== undefined) {
            // @ts-expect-error
            data.createdAt = data.createdAt.toDate();
        }
        // @ts-expect-error
        if (this.schema.options.timestamps === true && data.updatedAt !== undefined) {
            // @ts-expect-error
            data.updatedAt = data.updatedAt.toDate();
        }
        return Object.assign({ id: doc.id }, data);
    }
}
exports.default = Model;
